@page "/"
@using gradeManager.Layout.Componentes
@using gradeManager.Service.google
@inject NavigationManager Navigation
@inject TranslationService TranslationService
<div class="page-container">
    <NavBar />

    <!-- Section Héro -->
    <section id="hero" class="hero-section">
        <div class="hero-content" data-aos="fade-right">
            <h2>Bienvenue dans La platforme d'inscription</h2>
            <p>Veuillez Vous rassurer d'avoire deja un matricule</p>
            <button class="btn-primary" @onclick="NavigateToMatricule" data-aos="fade-up">S'inscrire'</button>
        </div>

        <img src="/te.png" alt="Illustration" class="card-img" data-aos="zoom-in" />
    </section>


    <!-- Modale de Connexion -->
    <div id="loginModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeLoginModal()">&times;</span>
            <h2>Connexion</h2>
            <input type="email" placeholder="Email" required>
            <input type="password" placeholder="Mot de passe" required>
            <button class="btn-primary">Se connecter</button>
            <p>Pas encore de compte ? <a href="#" onclick="openRegisterModal()">S'inscrire</a></p>
        </div>
    </div>

    <!-- Modal d'inscription -->
    <div id="registerModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeRegisterModal()">&times;</span>

            <h2>Inscription</h2>
            
            <input type="text" id="firstName" placeholder="Prénom" required>
            <input type="text" id="lastName" placeholder="Nom" required>
            <input type="text" id="nickName" placeholder="Pseudo" required>
            <input type="email" id="email" placeholder="Email" required>
            <input type="password" id="password" placeholder="Mot de passe" required
                   pattern="^(?=.*[A-Z])(?=.*\d)(?=.*\W).{8,}$"
                   title="Le mot de passe doit contenir au moins 8 caractères, une lettre majuscule, un chiffre et un caractère spécial.">
            <input type="password" id="confirmPassword" placeholder="Confirmer le mot de passe" required>
            <span id="passwordError" style="color: red; display: none;">Les mots de passe ne correspondent pas.</span>

            <button class="btn-submit">S'enregistrer</button>

            <p>Ou</p>

            <div class="social-login">
                <button class="google-btn">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png" alt="Google">
                    Connexion avec Google
                </button>
                <button class="github-btn">
                    <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub">
                    Connexion avec GitHub
                </button>
            </div>

            <p>Déjà un compte ? <a href="#" onclick="openLoginModal()">Se connecter</a></p>
        </div>
    </div>



    <!-- Section À propos -->
    <section id="about" class="about-section" data-aos="fade-up">
        <h2>À propos de nous</h2>
        <p>
            GradeManager est une application moderne et intuitive conçue pour aider les universités à gérer efficacement les notes et les performances académiques.
            Notre plateforme offre des outils avancés pour le suivi des résultats étudiants, l'analyse des performances et bien plus encore.
        </p>
    </section>

    <!-- Section Fonctionnalités -->
    <section id="features" class="features-section">
        <h2 data-aos="fade-up">Fonctionnalités</h2>
        <div class="features-grid">
            <div class="feature-card" data-aos="flip-left">
                <h3>Gestion des notes</h3>
                <p>Saisie, modification et suivi des notes en temps réel.</p>
            </div>
            <div class="feature-card" data-aos="flip-right">
                <h3>Analyses avancées</h3>
                <p>Graphiques et rapports pour suivre l'évolution des performances.</p>
            </div>
            <div class="feature-card" data-aos="flip-up">
                <h3>Interface intuitive</h3>
                <p>Une expérience utilisateur moderne et conviviale.</p>
            </div>
        </div>
    </section>


    <!-- Section Contact -->
    <section id="contact" class="contact-section" data-aos="fade-up">
        <h2>Contactez-nous</h2>
        <p>Vous avez des questions ou souhaitez en savoir plus ? N'hésitez pas à nous contacter !</p>
        <form class="contact-form">
            <input type="text" placeholder="Votre nom" />
            <input type="email" placeholder="Votre email" />
            <textarea placeholder="Votre message"></textarea>
            <button type="submit" class="btn-secondary" data-aos="zoom-in">Envoyer</button>
        </form>
    </section>

    <!-- Pied de page -->
    <footer class="footer">
        <p>&copy; 2025 GradeManager. Tous droits réservés.</p>
    </footer>

    <!-- AOS JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
    <script>
        AOS.init({
          duration: 1000, /* Durée de l'animation en ms */
          once: true, /* Animation se joue une seule fois */
        });
    </script>

</div>

@code {
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}

<style>


    body {
        height: 100%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: black;
    }
    

    /* Conteneur de la page avec fond animé en dégradé */
    .page-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #fff;
        background: linear-gradient(135deg, #1f1c2c, #6a0dad, #ff4e50, #3a3f58);
     
        animation: gradientAnimation 15s ease infinite;
       width: 100%;
    }

    /* Animation du dégradé */
    @@keyframes gradientAnimation {
      0% { background-position: 0% 50%; }
    25% { background-position: 50% 75%; }
    50% { background-position: 100% 50%; }
    75% { background-position: 50% 25%; }
    100% { background-position: 0% 50%; }
    }

    /* Section Héro */
    .hero-section {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 80vh;
        text-align: center;
        padding: 40px 20px;
        background: rgba(0, 0, 0, 0.3);
    }

    .hero-content h2 {
        font-size: 3rem;
        margin-bottom: 20px;
    }

    .hero-content p {
        font-size: 1.5rem;
        margin-bottom: 30px;
    }

    .btn-primary {
        background-color: #6a0dad;
        border: none;
        padding: 15px 30px;
        border-radius: 5px;
        color: #fff;
        font-size: 1.2rem;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-primary:hover {
            background-color: #7b1fa2;
            transform: scale(1.05);
        }

    /* Section À propos */
    .about-section {
        padding: 60px 20px;
        text-align: center;
        background: rgba(0, 0, 0, 0.2);
    }

        .about-section h2 {
            font-size: 2.5rem;
            margin-bottom: 20px;
        }

        .about-section p {
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto;
        }

    /* Section Fonctionnalités */
    .features-section {
        padding: 60px 20px;
        text-align: center;
        background: rgba(0, 0, 0, 0.1);
    }

        .features-section h2 {
            font-size: 2.5rem;
            margin-bottom: 40px;
        }

    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 30px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .feature-card {
        background: rgba(255, 255, 255, 0.1);
        padding: 20px;
        border-radius: 8px;
        transition: transform 0.3s ease, background 0.3s ease;
    }

        .feature-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.2);
        }

        .feature-card h3 {
            font-size: 1.8rem;
            margin-bottom: 15px;
        }

        .feature-card p {
            font-size: 1rem;
        }

    /* Section Contact */
    .contact-section {
        padding: 60px 20px;
        text-align: center;
        background: rgba(0, 0, 0, 0.2);
    }

        .contact-section h2 {
            font-size: 2.5rem;
            margin-bottom: 20px;
        }

        .contact-section p {
            font-size: 1.2rem;
            margin-bottom: 30px;
        }

    .contact-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
        max-width: 500px;
        margin: 0 auto;
    }

        .contact-form input,
        .contact-form textarea {
            padding: 10px;
            border-radius: 4px;
            border: none;
            font-size: 1rem;
            outline: none;
        }

            .contact-form input::placeholder,
            .contact-form textarea::placeholder {
                color: #888;
            }

        .contact-form textarea {
            resize: vertical;
            min-height: 100px;
        }

    .btn-secondary {
        background-color: #3a3f58;
        border: none;
        padding: 12px;
        border-radius: 4px;
        color: #fff;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-secondary:hover {
            background-color: #4a4f68;
            transform: scale(1.05);
        }

    /* Pied de page */
    .footer {
        text-align: center;
        padding: 20px;
        background: rgba(0, 0, 0, 0.4);
        font-size: 0.9rem;
    }

    .floating-image {
        position: absolute;
        top: 250px;
        right: 20px;
        width: 500px; 
        height: auto; 
        animation: floatAnimation 4s ease-in-out infinite;
        
    }


    @@keyframes floatAnimation {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }
</style>
<script>
     //effet de scroll
    AOS.init({
        duration: 1200, // Animation duration in milliseconds
        once: true,     // Whether animation should happen only once
    });
</script>
<!-- Styles des modales -->
<style>
    /* Style de la modal */
    .modal {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
        animation: fadeIn 0.5s ease-in-out;
    }

    .modal-content {
        background: linear-gradient(135deg, #4b0082, #1e1e60); /* Violet à Bleu Nuit */
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        width: 350px;
        position: relative;
        box-shadow: 0px 4px 10px rgba(255, 255, 255, 0.2);
        color: white;
        transform: translateY(-20px);
        opacity: 0;
        animation: slideIn 0.5s forwards ease-in-out;
    }

        .modal-content h2 {
            margin-bottom: 15px;
            font-size: 22px;
        }

        /* Style des champs */
        .modal-content input {
            width: 100%;
            padding: 10px;
            margin: 8px 0;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

            .modal-content input::placeholder {
                color: rgba(255, 255, 255, 0.7);
            }

    /* Bouton S'inscrire */
    .btn-submit {
        background: #ff4081;
        color: white;
        border: none;
        padding: 10px;
        width: 100%;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

        .btn-submit:hover {
            background: #ff0055;
        }

    /* Bouton de fermeture */
    .close {
        color: white;
        font-size: 30px;
        font-weight: bold;
        position: absolute;
        top: 10px;
        right: 20px;
        cursor: pointer;
        transition: color 0.3s;
    }

        .close:hover {
            color: #ff4081;
        }

    /* Boutons de connexion Google et GitHub */
    .social-login {
        margin-top: 10px;
    }

        .social-login button {
            display: flex;
            align-items: center;
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: 0.3s;
            margin-bottom: 8px;
        }

    .google-btn {
        background: white;
        color: black;
    }

    .github-btn {
        background: #333;
        color: white;
    }

        .google-btn img, .github-btn img {
            width: 20px;
            height: 20px;
            margin-right: 10px;
        }

    .google-btn:hover {
        background: #ddd;
    }

    .github-btn:hover {
        background: #555;
    }

    @@keyframes glowing {
        0%

    {
        filter: drop-shadow(0px 0px 5px rgba(0, 162, 255, 0.8));
    }

    50% {
        filter: drop-shadow(0px 0px 15px rgba(0, 162, 255, 1));
    }

    100% {
        filter: drop-shadow(0px 0px 5px rgba(0, 162, 255, 0.8));
    }

    }

    .hero-section .card-img {
        width: 50%; /* Réduit la taille */
        display: block;
        margin: 20px auto; /* Centre l'image */
        animation: glowing 1.5s infinite alternate ease-in-out;
    }


    /* Animation d'apparition */
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes slideIn {
        from

    {
        opacity: 0;
        transform: translateY(-20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
</style>
        <!-- Script pour gérer les modales -->
<script>
    function openLoginModal() {
        document.getElementById("loginModal").style.display = "flex";
        document.getElementById("registerModal").style.display = "none";
    }

    function closeLoginModal() {
        document.getElementById("loginModal").style.display = "none";
    }

    function openRegisterModal() {
        document.getElementById("registerModal").style.display = "flex";
        document.getElementById("loginModal").style.display = "none";
    }

    function closeRegisterModal() {
        document.getElementById("registerModal").style.display = "none";
    }
</script>
@code {
    private void NavigateToMatricule()
    {
        Navigation.NavigateTo("/matricule");
    }
}
<!----<script>
    // Fonction de connexion de l'utilisateur
    async function loginUser() {
        const email = document.querySelector("#loginModal input[type='email']").value;
        const password = document.querySelector("#loginModal input[type='password']").value;

        const response = await fetch("https://localhost:7066/api/auth/login", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ email, password })
        });

        if (!response.ok) {
            alert("Échec de connexion. Vérifiez vos identifiants.");
            return;
        }

        const data = await response.json();
        localStorage.setItem("token", data.token); // Stocker le token

        // Récupérer le rôle de l'utilisateur
        const userRole = await getUserRole(data.token);

        // Redirection en fonction du rôle
        if (userRole === "Admin") {
            window.location.href = "/admin-dashboad";
        } else {
            window.location.href = "/student-dashboard";
        }
    }

    // Fonction pour obtenir le rôle de l'utilisateur à partir du token
    async function getUserRole(token) {
        const response = await fetch("https://localhost:7066/api/auth/userRole", {
            method: "GET",
            headers: {
                "Authorization": "Bearer " + token
            }
        });

        if (!response.ok) {
            console.error("Impossible de récupérer le rôle.");
            return "User";
        }

        const data = await response.json();
        return data.role;
    }

    // Vérifier si l'utilisateur est déjà connecté en vérifiant le token
    function checkUserAuthentication() {
        const token = localStorage.getItem("token");
        if (!token) {
            // Rediriger l'utilisateur vers la page d'accueil s'il n'est pas connecté
            window.location.href = "/Home.razor"; // Remplacez par votre page de connexion si nécessaire
        }
    }

    // Vérification de la connexion à chaque chargement de la page
    window.onload = checkUserAuthentication;

    // Ajouter l'événement au bouton de connexion
    document.querySelector("#loginModal button").addEventListener("click", loginUser);
</script>-->

<script>
       async function loginUser() {
        const email = document.querySelector("#loginModal input[type='email']").value;
        const password = document.querySelector("#loginModal input[type='password']").value;

        const response = await fetch("https://localhost:7066/api/auth/login", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ email, password })
        });

        if (!response.ok) {
            alert("Échec de connexion. Vérifiez vos identifiants.");
            return;
        }

        const data = await response.json();

        // Vérifier si l'utilisateur a activé 2FA
        const requires2FA = data.message === "Veuillez vérifier votre e-mail pour le code 2FA.";

        if (requires2FA) {
            // Sauvegarder l'email dans localStorage pour l'auto-remplir
            localStorage.setItem("pendingEmail", email);

            // Rediriger vers la page de vérification 2FA
            window.location.href = "/verify-2fa";
        } else {
            // Stocker le token si pas de 2FA
            localStorage.setItem("token", data.token);
            document.cookie = "isAuthenticated=true; path=/"; // Cookie pour éviter le 2FA à chaque connexion

            // Récupérer le rôle de l'utilisateur
            const userRole = await getUserRole(data.token);

            // Redirection selon le rôle
            if (userRole === "Admin") {
                window.location.href = "/admin-dashboard";
            } else {
                window.location.href = "/student-dashboard";
            }
        }
    }

    // Vérification du cookie lors du chargement de la page
    function checkUserAuthentication() {
        const token = localStorage.getItem("token");
        const isAuthenticated = document.cookie.includes("isAuthenticated=true");

        if (!token || !isAuthenticated) {
            // Rediriger vers la page de connexion
            window.location.href = "/Home.razor";
        }
    }

    // Fonction de déconnexion (supprime le cookie et le token)
    function logout() {
        localStorage.removeItem("token");
        document.cookie = "isAuthenticated=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        window.location.href = "/Home.razor";
    }

    window.onload = checkUserAuthentication;
    document.querySelector("#loginModal button").addEventListener("click", loginUser);


    //verify 2fA
        document.addEventListener("DOMContentLoaded", function () {
        const emailField = document.querySelector("#email");
        emailField.value = localStorage.getItem("pendingEmail") || ""; // Auto-remplissage de l'email
    });

    // Fonction pour vérifier le code 2FA
    async function verify2FA() {
        const email = document.querySelector("#email").value;
        const code = document.querySelector("#code2fa").value;

        const response = await fetch("https://localhost:7066/api/auth/verify-2fa", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ email, code })
        });

        if (!response.ok) {
            alert("Code 2FA incorrect ou expiré !");
            return;
        }

        const data = await response.json();
        localStorage.setItem("token", data.token);
        document.cookie = "isAuthenticated=true; path=/"; // Stockage du cookie

        // Récupérer le rôle et rediriger
        const userRole = await getUserRole(data.token);
        if (userRole === "Admin") {
            window.location.href = "/admin-dashboard";
        } else {
            window.location.href = "/student-dashboard";
        }
    }


</script>
<script>
        async function registerUser() {
        const firstName = document.getElementById("firstName").value.trim();
        const lastName = document.getElementById("lastName").value.trim();
        const nickName = document.getElementById("nickName").value.trim();
        const email = document.getElementById("email").value.trim();
        const password = document.getElementById("password").value;
        const confirmPassword = document.getElementById("confirmPassword").value;
        const passwordError = document.getElementById("passwordError");

        // Vérification des mots de passe
        if (password !== confirmPassword) {
            passwordError.style.display = "block";
            return;
        } else {
            passwordError.style.display = "none";
        }

        // Objet utilisateur à envoyer à l'API
        const userData = {
            firstName,
            lastName,
            nickName,
            email,
            password
        };

        try {
            const response = await fetch("https://localhost:7066/api/auth/register", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(userData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                alert("Échec de l'inscription : " + (errorData.message || "Erreur inconnue"));
                return;
            }

            alert("Inscription réussie ! Connectez-vous.");
            closeRegisterModal();
            openLoginModal();
        } catch (error) {
            console.error("Erreur lors de l'inscription :", error);
            alert("Une erreur est survenue. Vérifiez votre connexion.");
        }
    }

    // Ajout d'un écouteur d'événement pour le bouton d'inscription
    document.querySelector('.btn-submit').addEventListener('click', function (event) {
        event.preventDefault(); // Empêcher la soumission du formulaire par défaut
        registerUser();
    });

    // Fonction pour fermer la modal d'inscription
    function closeRegisterModal() {
        document.getElementById("registerModal").style.display = "none";
    }

    // Fonction pour ouvrir la modal de connexion
    function openLoginModal() {
        document.getElementById("registerModal").style.display = "none";
        document.getElementById("loginModal").style.display = "block"; // Assurez-vous que `loginModal` existe dans votre HTML
    }

</script>

        